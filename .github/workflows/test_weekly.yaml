name: Tests Hebdomadaires Complets

on:
  schedule:
    - cron: "0 2 * * 1"

  # Possibilité de déclencher manuellement
  workflow_dispatch:
    inputs:
      full_coverage:
        description: "Générer rapport de couverture complet"
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Tests d'intégration complets
  integration-tests:
    name: "Tests d'Intégration Complets"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run integration tests
        run: |
          cd DreamProject
          python manage.py test diary.tests.test_integration --verbosity=2 --keepdb

  ai-testing:
    name: "Tests des IA"
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run complete AI tests
        run: |
          cd DreamProject
          python manage.py test diary.tests.test_ai_functions --verbosity=2 --keepdb

  # Audit de sécurité complet
  security-audit:
    name: "Audit Sécurité Complet"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r DreamProject/diary/ -f json -o bandit-report.json || true
          bandit -r DreamProject/diary/ -f txt

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run security tests
        run: |
          cd DreamProject
          python manage.py test diary.tests.test_security --verbosity=2

  # Rapport de couverture complet
  coverage-report:
    name: " Rapport Couverture Complet"
    runs-on: ubuntu-latest
    needs: [integration-tests, ai-testing]
    if: github.event.inputs.full_coverage == 'true' || github.event.inputs.full_coverage == ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage coverage-badge

      - name: Run all tests with coverage
        run: |
          cd DreamProject
          coverage run --source='diary' --omit='*/migrations/*,*/tests/*' manage.py test diary.tests --verbosity=1 --parallel
          coverage report --show-missing
          coverage html
          coverage xml
          coverage-badge -f -o coverage.svg

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            htmlcov
            coverage.xml
            coverage.svg

  # Rapport hebdomadaire final
  weekly-report:
    name: " Rapport Hebdomadaire"
    runs-on: ubuntu-latest
    needs: [integration-tests, ai-testing, security-audit, coverage-report]
    if: always()

    steps:
      - name: Generate comprehensive report
        run: |
          echo "=== RAPPORT HEBDOMADAIRE COMPLET ==="
          echo "Date: $(date)"
          echo "Semaine: $(date +%Y-W%U)"
          echo ""
          echo " RÉSULTATS DES TESTS:"
          echo "Integration: ${{ needs.integration-tests.result }}"
          echo "IA Complete: ${{ needs.ai-testing.result }}"
          echo "Sécurité: ${{ needs.security-audit.result }}"
          echo "Couverture: ${{ needs.coverage-report.result }}"
          echo ""

          # Calcul du score de santé
          TOTAL=0
          SUCCESS=0

          for result in "${{ needs.integration-tests.result }}" "${{ needs.ai-testing.result }}" "${{ needs.security-audit.result }}"; do
            TOTAL=$((TOTAL + 1))
            if [[ "$result" == "success" ]]; then
              SUCCESS=$((SUCCESS + 1))
            fi
          done

          HEALTH_SCORE=$((SUCCESS * 100 / TOTAL))
          echo " SCORE DE SANTÉ: ${HEALTH_SCORE}%"

          if [[ $HEALTH_SCORE -ge 90 ]]; then
            echo " EXCELLENT - Système en parfaite santé"
          elif [[ $HEALTH_SCORE -ge 75 ]]; then
            echo " BON - Quelques améliorations possibles"
          else
            echo " ATTENTION - Problèmes détectés à corriger"
          fi

          echo ""
          echo " PROCHAINES ACTIONS RECOMMANDÉES:"
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "- Vérifier les tests d'intégration"
          fi
          if [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "- Examiner les alertes de sécurité"
          fi