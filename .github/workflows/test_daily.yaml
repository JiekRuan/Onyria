name: Daily Tests

on:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      test_level:
        description: "Niveau de tests à exécuter"
        required: true
        default: "standard"
        type: choice
        options:
          - "standard"
          - "extended"

env:
  PYTHON_VERSION: "3.11"

jobs:
  models-and-utils:
    name: "Modèles & Utils"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: ["models", "utils"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run ${{ matrix.test-suite }} tests
        run: |
          cd DreamProject
          python manage.py test diary.tests.test_${{ matrix.test-suite }} --verbosity=2 --parallel

  views-tests:
    name: "Vues Django"
    runs-on: ubuntu-latest
    needs: models-and-utils
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run views tests
        run: |
          cd DreamProject
          python manage.py test diary.tests.test_views --verbosity=2 --parallel

  ai-tests:
    name: "Tests IA"
    runs-on: ubuntu-latest
    needs: views-tests
    if: github.event.inputs.test_level == 'extended' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run AI tests
        run: |
          cd DreamProject
          python manage.py test diary.tests.test_ai_functions --verbosity=2 --parallel

  quality-metrics:
    name: " Métriques Qualité"
    runs-on: ubuntu-latest
    needs: [models-and-utils, views-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage flake8 black
      - name: Format code with Black
        run: black .
      - name: Run linting
        run: |
          flake8 DreamProject/diary/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 DreamProject/diary/ --count --exit-zero --max-complexity=10 --statistics

  daily-summary:
    name: "Résumé Quotidien"
    runs-on: ubuntu-latest
    needs: [models-and-utils, views-tests, ai-tests, quality-metrics]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "=== RÉSUMÉ TESTS QUOTIDIENS ==="
          echo "Date: $(date)"
          echo "Status modèles: ${{ needs.models-and-utils.result }}"
          echo "Status vues: ${{ needs.views-tests.result }}"
          echo "Status IA: ${{ needs.ai-tests.result }}"
          echo "Status qualité: ${{ needs.quality-metrics.result }}"

          if [[ "${{ needs.models-and-utils.result }}" == "success" && "${{ needs.views-tests.result }}" == "success" ]]; then
            echo " Tests quotidiens RÉUSSIS"
          else
            echo "Échecs détectés dans les tests quotidiens"
          fi