"""
Django settings for Onyria project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url

# Charger les variables d'environnement dès le début
load_dotenv()

# Construction des chemins dans le projet : BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Paramètres de développement rapide - inappropriés pour la production
# Voir https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# AVERTISSEMENT DE SÉCURITÉ : gardez secrète la clé secrète utilisée en production !
SECRET_KEY = os.environ.get("SECRET_KEY", 'django-insecure-y7^764y!vsgk@&0bou_ht(^ca(spl1s!a$sx64b$@@0f=!0-nu')

# AVERTISSEMENT DE SÉCURITÉ : n'exécutez pas avec debug activé en production !
DEBUG = os.environ.get("DEBUG", "True").lower() == "true"

# Analyse des ALLOWED_HOSTS depuis l'env permettant virgules et/ou espaces, sans schémas
_hosts_raw = os.environ.get("ALLOWED_HOSTS", "")
ALLOWED_HOSTS = [
    h.strip()
    for h in _hosts_raw.replace("https://", "").replace("http://", "").replace(",", " ").split()
    if h.strip()
]

# Configuration IA et modèles - centralisée pour faciliter la maintenance
AI_CONFIG = {
    # Modèles utilisés
    'WHISPER_MODEL': 'whisper-large-v3-turbo',
    'IMAGE_GENERATION_MODEL': 'mistral-medium-2505',
    'EMOTION_MODEL': 'mistral-small-latest',
    'INTERPRETATION_MODEL': 'mistral-large-latest',
    
    # Paramètres de retry
    'TRANSCRIBE_MAX_RETRIES': 3,
    'TRANSCRIBE_BACKOFF_BASE': 1.5,
    
    # Timeouts et limites
    'DEFAULT_TEMPERATURE': 0.0,
    'API_TIMEOUT': 30,
    'SSE_SLOW_WARNING_THRESHOLD': 15,
    
    # Hiérarchies de fallback par modèle
    'FALLBACK_CHAINS': {
        'mistral-large-latest': ['mistral-medium', 'mistral-small-latest', 'open-mistral-7b'],
        'mistral-medium': ['mistral-small-latest', 'open-mistral-7b'],
        'mistral-small-latest': ['open-mistral-7b'],
        'open-mistral-7b': [],
    }
}

# Clés API depuis les variables d'environnement
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")
MISTRAL_API_KEY = os.environ.get("MISTRAL_API_KEY")

# Définition des applications
INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    "diary.apps.DiaryConfig",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
    "accounts",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Onyria.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Onyria.wsgi.application'


# Base de données
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuration adaptative : utilise DATABASE_URL si présent, sinon SQLite local
database_url = os.environ.get("DATABASE_URL")
if database_url:
    DATABASES = {
        'default': dj_database_url.parse(database_url)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Validation de mot de passe
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalisation
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Fichiers statiques (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / "staticfiles"

# Configuration adaptative des fichiers statiques
if DEBUG:
    # Développement : pas de compression/hashing
    STORAGES = {
        "default": {"BACKEND": "django.core.files.storage.FileSystemStorage"},
        "staticfiles": {"BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage"},
    }
else:
    # Production : WhiteNoise avec compression
    STORAGES = {
        "default": {"BACKEND": "django.core.files.storage.FileSystemStorage"},
        "staticfiles": {"BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"},
    }

# Emplacement des sources d'assets (dossier 'static' à la racine du repo)
STATICFILES_DIRS = [ BASE_DIR.parent / "static" ]


# Type de clé primaire par défaut
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.CustomUser'  # Modèle personnalisé

LOGIN_REDIRECT_URL = '/diary/record/'
LOGOUT_REDIRECT_URL = 'login'

# CONFIGURATION DES LOGS
# Adapte automatiquement le niveau selon l'environnement :
# - Développement (DEBUG=True) : logs DEBUG pour diagnostic détaillé
# - Production (DEBUG=False) : logs INFO+ pour monitoring essentiel

LOG_LEVEL = 'DEBUG' if DEBUG else 'INFO'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {name} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': LOG_LEVEL,  # S'adapte selon DEBUG
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'diary': {
            'handlers': ['console'],
            'level': LOG_LEVEL,  # S'adapte selon DEBUG
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}